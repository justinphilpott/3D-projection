{"mappings":"AAAA,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,WAAW;AAChC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI;AAElC,EAA4B,AAA5B,0BAA4B;AAC5B,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAA0B;AAEhE,KAAK,CAAC,UAAU,GAAG,IAAI;AACvB,GAAG,CAAC,OAAO,GAAG,CAAC;AACf,KAAK,CAAC,GAAG,GAAG,EAAE;AACd,KAAK,CAAC,SAAS,GAAG,KAAK;AACvB,GAAG,CAAC,KAAK,GAAG,CAAC;AACb,GAAG,CAAC,SAAS,GAAG,CAAC;AACjB,KAAK,CAAC,WAAW,GAAG,CAAC;AACrB,KAAK,CAAC,YAAY,GAAG,IAAI;AAGzB,EAAmB,AAAnB,iBAAmB;AACnB,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;AAChB,GAAG,CAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,GAAI,CAAC;IAClC,KAAK,CAAC,IAAI,GAAG,CAAC;QACV,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW;QACnC,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;IACR,CAAC;IACD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG;IAC1B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG;IAC1B,aAAa,CAAC,IAAI,EAAE,IAAI;IACxB,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM;IAC9B,KAAK,CAAC,IAAI,CAAC,IAAI;AACnB,CAAC;SAEQ,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;IACnC,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,KAAK,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,KAAK,IAAI,GAAG,IAAI;IAE/E,EAAqF,AAArF,mFAAqF;IACrF,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE,GAAG,CAAC;IACvC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,KAAK,EAAE,GAAG,CAAC;IACvC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,QAAQ;IACjC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,QAAQ;AACrC,CAAC;AAED,EAAsC,AAAtC,oCAAsC;AACtC,WAAW,KAAO,CAAC;IACf,SAAS,GAAG,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AACrC,CAAC,EAAE,IAAI;AAEP,EAA4B,AAA5B,0BAA4B;AAC5B,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,GAAK,CAAC;IACvB,EAAsF,AAAtF,oFAAsF;IACtF,KAAK,KAAK,SAAS,GAAG,KAAK,IAAI,EAAE;IACjC,OAAO,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,SAAS;IAC1C,GAAG,CAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,GAAI,CAAC;QAClC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;QACpB,EAAE,EAAE,IAAI,CAAC,CAAC,GAAG,OAAO,EAAE,aAAa,CAAC,IAAI;QAExC,EAA2D,AAA3D,yDAA2D;QAC3D,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,OAAO;QAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC;QAC9F,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;QAE/F,EAAmC,AAAnC,iCAAmC;QACnC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC;QAC9D,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;QAC/D,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ;QAC1E,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI;QACnD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,aAAa,GAAG,YAAY;QAClD,EAAmE,AAAnE,iEAAmE;QACnE,EAAqI,AAArI,mIAAqI;QACrI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,aAAa,GAAG,YAAY,GAAG,aAAa,GAAG,KAAK,GAAG,WAAW,GAAG,cAAc,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK;QACrI,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC;IACvE,CAAC;AACL,CAAC;AAED,OAAO,CAAC,GAAG,CAAC,CAAM","sources":["projects/waiting/perspectivep/src/pixi-demo.tsx"],"sourcesContent":["const app = new PIXI.Application();\ndocument.body.appendChild(app.view);\n\n// Get the texture for rope.\nconst starTexture = PIXI.Texture.from('examples/assets/star.png');\n\nconst starAmount = 1000;\nlet cameraZ = 0;\nconst fov = 20;\nconst baseSpeed = 0.025;\nlet speed = 0;\nlet warpSpeed = 0;\nconst starStretch = 5;\nconst starBaseSize = 0.05;\n\n\n// Create the stars\nconst stars = [];\nfor (let i = 0; i < starAmount; i++) {\n    const star = {\n        sprite: new PIXI.Sprite(starTexture),\n        z: 0,\n        x: 0,\n        y: 0,\n    };\n    star.sprite.anchor.x = 0.5;\n    star.sprite.anchor.y = 0.7;\n    randomizeStar(star, true);\n    app.stage.addChild(star.sprite);\n    stars.push(star);\n}\n\nfunction randomizeStar(star, initial) {\n    star.z = initial ? Math.random() * 2000 : cameraZ + Math.random() * 1000 + 2000;\n\n    // Calculate star positions with radial random coordinate so no star hits the camera.\n    const deg = Math.random() * Math.PI * 2;\n    const distance = Math.random() * 50 + 1;\n    star.x = Math.cos(deg) * distance;\n    star.y = Math.sin(deg) * distance;\n}\n\n// Change flight speed every 5 seconds\nsetInterval(() => {\n    warpSpeed = warpSpeed > 0 ? 0 : 1;\n}, 5000);\n\n// Listen for animate update\napp.ticker.add((delta) => {\n    // Simple easing. This should be changed to proper easing function when used for real.\n    speed += (warpSpeed - speed) / 20;\n    cameraZ += delta * 10 * (speed + baseSpeed);\n    for (let i = 0; i < starAmount; i++) {\n        const star = stars[i];\n        if (star.z < cameraZ) randomizeStar(star);\n\n        // Map star 3d position to 2d with really simple projection\n        const z = star.z - cameraZ;\n        star.sprite.x = star.x * (fov / z) * app.renderer.screen.width + app.renderer.screen.width / 2;\n        star.sprite.y = star.y * (fov / z) * app.renderer.screen.width + app.renderer.screen.height / 2;\n\n        // Calculate star scale & rotation.\n        const dxCenter = star.sprite.x - app.renderer.screen.width / 2;\n        const dyCenter = star.sprite.y - app.renderer.screen.height / 2;\n        const distanceCenter = Math.sqrt(dxCenter * dxCenter + dyCenter * dyCenter);\n        const distanceScale = Math.max(0, (2000 - z) / 2000);\n        star.sprite.scale.x = distanceScale * starBaseSize;\n        // Star is looking towards center so that y axis is towards center.\n        // Scale the star depending on how fast we are moving, what the stretchfactor is and depending on how far away it is from the center.\n        star.sprite.scale.y = distanceScale * starBaseSize + distanceScale * speed * starStretch * distanceCenter / app.renderer.screen.width;\n        star.sprite.rotation = Math.atan2(dyCenter, dxCenter) + Math.PI / 2;\n    }\n});\n\nconsole.log('test');"],"names":[],"version":3,"file":"index.e4c0f626.js.map","sourceRoot":"/__parcel_source_root/"}